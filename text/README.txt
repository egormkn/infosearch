В домашнем задании надо будет обучить скрытую Марковскую модель на размеченных данных и, с ее помощью, научиться выделять в тексте именованные сущности: имена людей, названия организаций, географические названия.

Если подробнее, то:
    - Обучаемся на файлике Train.db.ru.xml.gz -- в нем размечены имена людей, организации и гео-объекты.
    - В качестве набора возможных внутренних состояний можно взять состояния как в примере на 98-м слайде (рис. 3.1).
    - Оцениваем параметры нашей модели (т.е. вероятности переходов между внутренними состояниями Aij и вероятности выпуска слов Bijk) методом максимального правдоподобия.      Например, для внутренних состояний мы можем считать, что у нас биграммная модель, только вместо слов -- внутренние состояния, т.е. мы оцениваем вероятность перехода      из состояния i в состояние j по формуле оценки максимального правдоподобия для биграммной модели, см. слайды.
      Для вероятностей выпуска слов в качестве упрощения можно принять, что они зависят только от начального состояния i и не зависят от конечного состояния j 
      (т.е. ситуация идентична примеру с автоматом и напитками).
    - С помощью алгоритма Витерби применяем нашу обученную модель на неразмеченном тексте и выделяем в нем именованные сущности.

В качестве оценки будем использовать метрики полноты, точности и F1-меру по каждому из типов сущностей.
Какие-то отклонения от описанной выше схемы не только разрешаются, но и приветствуются, чем больше получится выбить по метрикам -- тем лучше (речь идет именно о небольших отклонениях, т.е. требуется реализовать именно алгоритм Витерби, а не какой-то другой).

Требования к оформлению скриптов:
    - Главный скрипт должен быть написан на языке Python 2.7 и называться tests.py
    - Решение задачи должно быть оформлено в виде функции с названием test_hmm(<параметры метода>)
    - На вход получаем массив предложений (массив строк: ['sentence_1', 'sentence_2']).
    - Возвращаем массив записей (по одной на предложение), содержащих размеченные объекты. Каждая такая запись -- это массив троек (Маркер, Позиция начала объекта, Позиция конца объекта).
    - Маркер может принимать одно из 3-х возможных значений: С – компания, P – персона, G - geo
    - Позиция начала/конца объекта – это индекс слова в предложении, начиная с нуля
    - При разбиении на слова знаки препинания не учитываем. В качестве набора возможных знаков препинания можно взять string.punctuation


[!]
["]
[#]
[$]
[%]
[&]
[']
[(]
[)]
[*]
[+]
[,]
[-]
[.]
[/]
[:]
[;]
[<]
[=]
[>]
[?]
[@]
[[]
[\]
[]]
[^]
[_]
[`]
[{]
[|]
[}]
[~]


Авточекер для этого задания пока что не работает, поэтому все решения/вопросы присылайте на krivoy@corp.mail.ru

